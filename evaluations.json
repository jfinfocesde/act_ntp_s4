{
  "JUsmaa/act_ntp_s3": {
    "repositoryUrl": "JUsmaa/act_ntp_s3",
    "studentName": "Julian Usma Perez",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La solución imprime del 1 al 9, en lugar de 0 al 9.  El `print` incluye texto innecesario; debería imprimir solo el número."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Sin embargo, la condición `if (i < 1): break` es redundante, ya que el ciclo `while i:` ya se detendrá cuando `i` sea 0. Simplifica eliminando esa condición."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código calcula la suma correctamente, pero imprime la suma parcial en cada iteración del ciclo. Deberías imprimir la suma final solo después de que el ciclo `for` termine."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con los requisitos. El código es legible y funciona como se espera."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 1,
        "fileFound": true,
        "feedback": "El código no cumple con los requisitos de la actividad. Falta la implementación del ciclo for para imprimir la tabla del 7."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      }
    ],
    "overallScore": 0.8,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Necesita mejorar. Completó 20/20 actividades (100%) con una calificación promedio de 0.8/5. Se recomienda revisar los conceptos fundamentales.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja",
      "Enfocarse en mejorar la documentación y comentarios del código",
      "Aplicar mejores prácticas de programación"
    ],
    "evaluatedAt": "2025-07-25T06:32:16.488Z",
    "evaluatedBy": "Sistema"
  },
  "CristianSierra420/act_ntp_s3": {
    "repositoryUrl": "CristianSierra420/act_ntp_s3",
    "studentName": "Cristian Andrés  Sierra Duque",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 4,
        "fileFound": true,
        "feedback": "El código funciona correctamente. La condición `if i < 10:` es redundante dentro del bucle for y puede ser removida para mejorar la legibilidad. El uso de `range(10)` es la forma correcta de iterar del 0 al 9."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos de la actividad. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, eficiente y cumple con todos los requisitos. El código es legible y sigue las buenas prácticas."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código es funcional y cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos de la actividad."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código es limpio y fácil de entender, cumpliendo con la descripción de la actividad."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código cumple con los requisitos de la actividad y está bien estructurado."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, eficiente y cumple con todos los requisitos de la actividad. El uso del `range` con el paso de 2 es la forma más eficiente de resolver el problema."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El uso de `.lower()` para la comparación con 'fin' hace que el programa sea más robusto."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, cumpliendo el objetivo de la actividad. El código es legible y funciona como se espera."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "El código resuelve correctamente el problema del factorial usando un ciclo while. Es legible y bien estructurado, cumpliendo con los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y cumple con el objetivo planteado utilizando un ciclo for y la función range de manera adecuada."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y cumple con todos los requisitos de la actividad. Bien hecho."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y resuelve el problema correctamente. No hay áreas de mejora evidentes."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible, bien estructurado y cumple con el objetivo propuesto. Excelente uso del formato f-string para la salida."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es limpio, funcional y cumple con todos los requisitos de la actividad. El uso de `isdigit()` es correcto y las salidas son claras."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"9s\"}]}}"
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"8s\"}]}}"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"7s\"}]}}"
      }
    ],
    "overallScore": 4.2,
    "totalActivities": 20,
    "completedActivities": 17,
    "summary": "Excelente trabajo. Completó 17/20 actividades (85%) con una calificación promedio de 4.2/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_18.py, src/ejercicio_19.py, src/ejercicio_20.py"
    ],
    "evaluatedAt": "2025-07-25T17:29:53.255Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "JuanRivera24/act_ntp_s4": {
    "repositoryUrl": "JuanRivera24/act_ntp_s4",
    "studentName": "Juan Manuel Rivera Restrepo",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender. Incluye la prueba de la función como parte del script."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Sería mejor encapsular el cálculo del promedio, máximo y mínimo en funciones separadas para mejorar la legibilidad y reutilización."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con los requisitos del ejercicio."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución resuelve el problema planteado. Se podría mejorar la validación de la entrada (precio) y la presentación de los productos en el carrito para mayor claridad."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional, pero no utiliza ciclos anidados como se sugiere en la descripción del ejercicio (aunque esto no era estrictamente obligatorio). Se podría mejorar la legibilidad agregando comentarios."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es conciso, legible y cumple con todos los requisitos del ejercicio. El uso de listas por comprensión es muy apropiado."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y concisa. El código es limpio y eficiente al usar una comprensión de tupla para filtrar los estudiantes."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución genera correctamente la tupla de Fibonacci y filtra los impares. Podría mejorarse la claridad separando la generación de la tupla de Fibonacci de la impresión de los impares y usando un ciclo for para la impresión como se pide en la descripción."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y resuelve correctamente el problema planteado. Además, utiliza la función `math.dist` de manera eficiente."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente, utilizando una comprensión de lista para lograr el resultado deseado. El código es legible y cumple con las buenas prácticas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, pero sería mejor incluir los nombres de las operaciones al imprimirlas para mayor claridad. Además, se esperaría que la conversión de listas a conjuntos se realizara *dentro* de la función, no con `set(l1), set(l2)`. "
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se podría mejorar incluyendo una función main() para organizar mejor el código."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utiliza comprensiones de conjunto de manera eficiente. Sin embargo, podría ser más legible si se separan las operaciones de conjuntos en líneas separadas y se imprimen con etiquetas descriptivas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza un conjunto para almacenar los votos únicos y la lógica del ciclo while es adecuada. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa.  Sin embargo, no utiliza un ciclo for como lo pide la descripción del ejercicio, aunque la función logra el objetivo. Sería mejor agregar comentarios y documentación para mejorar la legibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos básicos de la actividad. Se podría mejorar la validación de entrada (por ejemplo, asegurarse de que la cantidad sea un número positivo) y estructurar el código en funciones más pequeñas para mayor legibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible, bien estructurado y utiliza buenas prácticas como `get()` para contar palabras y `sorted()` con `lambda` para ordenar el diccionario."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución resuelve la actividad correctamente y es funcional. Podría mejorar la presentación del menú y el manejo de errores al eliminar contactos (notificar si no existe)."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con los requisitos. Sería mejor encapsular la funcionalidad en funciones separadas para mejor legibilidad y reutilización del código. Además, se podría agregar validación de entrada para las notas."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La solución cumple con la funcionalidad básica, pero le falta el cálculo de estadísticas y validación de entradas. La estructura del código podría mejorarse para facilitar la lectura y mantenimiento."
      }
    ],
    "overallScore": 4.35,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.3/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-20T01:46:46.304Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "Samuel0490/act_ntp_s4": {
    "repositoryUrl": "Samuel0490/act_ntp_s4",
    "studentName": "Samuel Alvis Bornacelly",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y bien estructurada. El código es legible y cumple con la descripción de la actividad. Buen trabajo."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y completa. El código es legible y maneja correctamente la entrada del usuario y los cálculos solicitados."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y bien estructurada. El código incluye validación del tamaño de las listas y una prueba funcional, demostrando buenas prácticas."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos. Se podría mejorar la gestión de errores al eliminar productos (manejar el caso en que el carrito esté vacío) y usar funciones auxiliares para modularizar el código."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional, utilizando ciclos anidados de forma adecuada. Se puede mejorar la modularidad separando la lógica de entrada del usuario de la función principal. Considera validar que la entrada del usuario sea una sola letra."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, bien estructurado y resuelve el problema planteado eficientemente. Incluye la generación de puntos aleatorios, el cálculo de la distancia y la identificación correcta de los puntos dentro del círculo."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y bien estructurada. El código cumple con todos los requisitos de la actividad y sigue buenas prácticas."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible, bien estructurado y cumple con todos los requisitos de la actividad. Podría añadirse documentación (docstrings) a la función para mejorar aún más la claridad."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es claro, bien estructurado y utiliza buenas prácticas como el uso de `math.sqrt` para el cálculo de la distancia euclidiana. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible, bien estructurado y cumple con el objetivo propuesto. Se incluye validación de la longitud de las tuplas y conversión explícita a tupla al final."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se podría mejorar la legibilidad utilizando comprensión de conjuntos en lugar de ciclos for para crear los conjuntos."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, eficiente y cumple con todos los requisitos de la actividad. Utiliza buenas prácticas al normalizar la entrada y al estructurar la lógica del programa."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y bien estructurada. El código es legible, eficiente y cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. El uso de conjuntos para evitar votos duplicados es adecuado. Se puede mejorar la legibilidad separando la lógica de entrada/validación de la lógica de conteo de votos en funciones separadas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y bien estructurada. El código es legible y cumple con el objetivo de la actividad utilizando un ciclo for para crear el conjunto y calcular los duplicados."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos del problema. Se puede mejorar la validación de entrada (ej: asegurar que la cantidad ingresada sea un entero positivo) y considerar el uso de funciones auxiliares para organizar mejor el código."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y cumple con todos los requisitos, incluyendo el manejo de mayúsculas/minúsculas y el ordenamiento por frecuencia. Bien hecho."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. El código está bien estructurado y es legible. Se podría mejorar la validación de la entrada del usuario (ej: validar que el teléfono sea un número)."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y bien estructurada, cumpliendo con los requisitos. Podría mejorarse la validación de entrada de datos y la organización del código en funciones más pequeñas para aumentar la legibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos de la actividad y ofrece un menú interactivo funcional. Se podría mejorar la validación de entrada y la modularización del código para hacerlo más legible y mantenible."
      }
    ],
    "overallScore": 4.6,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.6/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-20T01:53:43.998Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "JoelSMR/act_ntp_s4": {
    "repositoryUrl": "JoelSMR/act_ntp_s4",
    "studentName": "Joel Stiven Mariños Rivera",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con la descripción del problema. Buen trabajo."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código maneja la entrada de datos de forma robusta y calcula correctamente las estadísticas solicitadas."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, funcional y cumple con todos los requisitos de la actividad. Bien hecho."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con la funcionalidad requerida y está bien estructurada. Se sugiere agregar validación de entrada para el precio y manejar excepciones para evitar errores en tiempo de ejecución. Considera usar un diccionario en vez de listas anidadas para representar los productos."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se puede mejorar la eficiencia evitando la repetición de palabras en la lista `palabrasencontradas` si una palabra contiene la letra varias veces. Considerar usar conjuntos para eliminar duplicados."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, bien estructurado y cumple con todos los requisitos de la actividad. Excelente trabajo!"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y sigue las buenas prácticas al usar un ciclo for y convertir la lista filtrada a una tupla al final."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es limpio, eficiente y cumple con todos los requisitos. Muy bien implementado el uso de la tupla y los ciclos."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La función resuelve correctamente el problema. Podría mejorar la legibilidad incluyendo comentarios y evitando variables innecesarias en el cálculo de la distancia. Considera generalizar el ejemplo en una función main."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza un ciclo for para sumar los elementos de las tuplas y devuelve el resultado como una nueva tupla. Buen trabajo."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos del problema. Bien hecho."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos. El código es claro, conciso y utiliza conjuntos eficientemente para la tarea."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con todos los requisitos de la actividad, incluyendo la generación de los conjuntos y las operaciones entre ellos."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza adecuadamente un conjunto para almacenar los votos únicos y permite terminar la votación con 'fin'. Buen trabajo."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con los requerimientos del problema. Utiliza un ciclo for y un conjunto de forma correcta para identificar y contar los duplicados."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 1,
        "fileFound": true,
        "feedback": "El código proporcionado no corresponde a la descripción del problema (simulación de un inventario). Implementa un contador de palabras en una frase. Es necesario rehacer la actividad enfocándose en la manipulación de un diccionario para representar el inventario."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código cumple con todos los requisitos del ejercicio y está bien estructurado."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos del ejercicio. Se podría mejorar la validación de la entrada del usuario y encapsular la lógica en funciones más pequeñas para aumentar la legibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con los requisitos. Se podría mejorar la estructura utilizando funciones auxiliares para cada opción del menú y validando la entrada del usuario (por ejemplo, asegurarse de que la calificación sea un número válido)."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos principales. Se podría mejorar la validación de entrada (p. ej., asegurarse de que la temperatura sea un número) y encapsular la lógica de cada opción en funciones separadas para mayor legibilidad."
      }
    ],
    "overallScore": 4.5,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.5/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-20T14:07:08.359Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "Bangel0/act_ntp_s4": {
    "repositoryUrl": "Bangel0/act_ntp_s4",
    "studentName": "Brahian Angel Ospina",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, legible y sigue las buenas prácticas al definir una función y usar comentarios para explicar el código. Excelente trabajo."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con los requisitos. Se podría mejorar encapsulando la lógica en una función y validando que la calificación ingresada sea un valor numérico válido, como también verificar que este en el rango de calificaciones permitidas."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y resuelve correctamente el problema planteado. Además, incluye validación de la longitud de las listas, lo cual es una buena práctica."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos de la actividad. El código es funcional y bien estructurado, aunque se podría mejorar la validación de la entrada del usuario (por ejemplo, verificar que el precio sea un número válido antes de agregarlo). Buen uso de diccionarios para manejar los precios."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La función cumple con el objetivo principal, pero la forma en que está implementada no es ideal (mezcla lógica con entrada/salida). Se recomienda separar la lógica de búsqueda en una función pura y evitar variables globales. Además, la función debería retornar la lista de palabras encontradas en lugar de imprimirlas directamente."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La función genera coordenadas aleatorias, pero la condición para determinar si un punto está dentro del círculo es incorrecta (debería usar la distancia al origen). Además, el manejo del caso en que ningún punto está dentro del círculo es mejorable."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      }
    ],
    "overallScore": 1.2,
    "totalActivities": 20,
    "completedActivities": 6,
    "summary": "Necesita mejorar. Completó 6/20 actividades (30%) con una calificación promedio de 1.2/5. Se recomienda revisar los conceptos fundamentales.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja",
      "Enfocarse en mejorar la documentación y comentarios del código",
      "Aplicar mejores prácticas de programación"
    ],
    "evaluatedAt": "2025-08-20T14:13:56.031Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "galygmnz/act_ntp_s4": {
    "repositoryUrl": "galygmnz/act_ntp_s4",
    "studentName": "Edgarly Yasmin Gimenez Yajure",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      }
    ],
    "overallScore": 0,
    "totalActivities": 20,
    "completedActivities": 0,
    "summary": "Necesita mejorar. Completó 0/20 actividades (0%) con una calificación promedio de 0.0/5. Se recomienda revisar los conceptos fundamentales.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja",
      "Enfocarse en mejorar la documentación y comentarios del código",
      "Aplicar mejores prácticas de programación"
    ],
    "evaluatedAt": "2025-08-20T14:20:14.938Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "Santiago-cm-program/act_ntp_s4": {
    "repositoryUrl": "Santiago-cm-program/act_ntp_s4",
    "studentName": "Santiago  Correa Mejia",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La función resuelve el problema correctamente. Sin embargo, la lista `lista_nueva` debería definirse dentro de la función para evitar efectos secundarios inesperados. Además, sería mejor retornar la lista en lugar de imprimirla."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y resuelve el problema. Sin embargo, el cálculo de 'mayor', 'menor' y 'promedio' dentro del bucle es ineficiente. Deberían calcularse después de que el usuario ingrese todas las calificaciones."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se puede mejorar separando la lógica de la función de la ejecución (la función debería retornar la lista, no imprimirla). Además, sería bueno incluir validación de que las listas tengan el mismo tamaño."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y resuelve el problema planteado. Se puede mejorar añadiendo validación de entrada para la opción del menú y calculando el total de la compra (precios a los productos)."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional, pero la impresión de la palabra encontrada dentro del bucle es ineficiente y genera repeticiones. Considera mejorar la claridad de la impresión final y evita el `print` dentro de la función, mejor retorna el resultado para manejar la salida fuera."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con la funcionalidad requerida. Se recomienda usar nombres de variables más descriptivos y considerar retornar la tupla de puntos en lugar de imprimirla directamente desde la función."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos del problema. Buen trabajo."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se podría mejorar la legibilidad encapsulando la lógica de impresión de impares en una función separada y evitando reutilizar el mismo nombre `tupla_fibonacci` para la función y la variable tupla."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, legible y bien estructurado, cumpliendo con las buenas prácticas."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se podría mejorar la validación de longitud de las tuplas retornando un valor en caso de error en lugar de solo imprimir. Considera usar nombres de variables más descriptivos."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es correcto, limpio y funcional, cumpliendo con todos los requisitos de la actividad. Se utilizan ciclos for para la creación de los conjuntos y se calculan correctamente las operaciones solicitadas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente, utilizando conjuntos para almacenar las palabras únicas y repetidas. El código es legible y bien estructurado, cumpliendo con los requisitos del ejercicio."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 2,
        "fileFound": true,
        "feedback": "El código intenta generar los conjuntos, pero la condición `i % 2 == 0` y `i % 3 == 0` no se utiliza para filtrar correctamente los elementos.  Falta corregir la lógica dentro de los bucles for para agregar solo los números que cumplen la condición de ser par o múltiplo de 3, respectivamente. Además, el rango del primer ciclo for no es el correcto para generar los pares del 2 al 20."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos. El código es legible y bien estructurado. ¡Buen trabajo!"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es claro, bien estructurado y cumple con todos los requisitos del ejercicio, incluyendo el uso del ciclo for y la comparación de tamaños."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "El código funciona correctamente y cumple con los requisitos. Se puede mejorar la validación de entrada y la gestión de errores, ademas de corregir el error en la opcion 3 donde se usa 'producto' en vez de 'eliminar_producto'."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional.  Sería mejor separar la lógica de conteo de palabras de la presentación de resultados para mayor modularidad. Considera añadir comentarios para mejorar la legibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos básicos, pero podría mejorar la validación de entrada (manejo de errores si el usuario ingresa texto en lugar de números) y la opción de eliminar contactos. La estructura del código es clara, pero podría beneficiarse de funciones separadas para cada opción del menú para mayor modularidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y cumple con los requisitos. Se puede mejorar encapsulando la lógica en funciones más pequeñas y añadiendo validación de rango para las notas."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos del problema y presenta una interfaz de usuario interactiva. Podría mejorarse la validación de entradas y modularizar el código en funciones más pequeñas para mayor legibilidad y mantenibilidad."
      }
    ],
    "overallScore": 4.2,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.2/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-20T14:26:56.377Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "Mateogv09/act_ntp_s4": {
    "repositoryUrl": "Mateogv09/act_ntp_s4",
    "studentName": "Mateo Gonzalez Villegas",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con los requisitos del ejercicio. Buena práctica al incluir una prueba con la lista proporcionada."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podrías mejorar la estructura separando la lógica de entrada/validación de la de cálculo y salida. Además, la función `sistema_calificaciones` no debería retornar nada, lo cual hace innecesario el `print` al final."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, eficiente y fácil de entender. El código es limpio y sigue buenas prácticas. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y resuelve el problema planteado. Se podría mejorar la gestión de errores (ej: validación de la entrada del precio) y usar funciones para modularizar el código."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código es funcional y sigue buenas prácticas al convertir a minúsculas para la búsqueda insensible a mayúsculas."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podría retornar la tupla de puntos dentro del círculo en lugar de imprimirla para mejorar la reutilización del código."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y bien estructurada. El código es legible y cumple con la descripción del problema. Se puede mejorar la eficiencia usando una comprensión de lista para crear la tupla resultante."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podrías mejorar la legibilidad separando la lógica de generación de Fibonacci de la lógica de impresión, y evitar usar listas por comprensión cuando un simple bucle for es suficiente para imprimir los impares."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, legible y bien estructurada. Implementa la lógica solicitada de manera eficiente y sigue buenas prácticas."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y eficiente. El uso de comprensión de tuplas es conciso y legible. Buen manejo de la validación de longitudes."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y completa. El código es legible y cumple con la descripción del problema. Excelente uso de conjuntos y operaciones."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y cumple con todos los requisitos de la actividad. Buena utilización de conjuntos para identificar palabras únicas y repetidas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y cumple con los requisitos de la actividad, utilizando ciclos for y operaciones de conjuntos de manera efectiva."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con todos los requisitos de la actividad. El uso de un conjunto es apropiado para evitar votos duplicados."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo de eliminar duplicados y mostrar la cantidad eliminada."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y cumple con los requisitos básicos. Se podría mejorar la validación de la entrada del usuario (e.g., evitar errores si la cantidad no es un número) y la presentación del inventario para que sea más legible."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, eficiente y cumple con todos los requisitos del ejercicio. La función `contador_palabras` implementa correctamente el conteo y ordenamiento de las palabras."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos de la actividad. Se podría mejorar la validación de la entrada del usuario (por ejemplo, verificar que el teléfono sea un número) y modularizar el código en funciones más pequeñas para mayor legibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con los requisitos. Se podría mejorar la organización separando la lógica en funciones más pequeñas para mejor legibilidad y reutilización."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podría mejorarse encapsulando el cálculo de promedios en funciones separadas para mayor claridad y reutilización. Además, generalizar los días de la semana evitaría hardcoding."
      }
    ],
    "overallScore": 4.6,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.6/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-20T14:29:18.479Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "Sebastian0418/act_ntp_s4": {
    "repositoryUrl": "Sebastian0418/act_ntp_s4",
    "studentName": "Estudiante desconocido",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, legible y cumple con las buenas prácticas. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y bien estructurada. Cumple con todos los requisitos de la actividad, incluyendo la validación de entrada y el manejo de casos borde (no se ingresaron calificaciones)."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente, cumpliendo con los requisitos del ejercicio. El código es limpio, bien estructurado y fácil de entender, además incluye una verificación del tamaño de las listas."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es funcional, bien estructurado y fácil de entender. Se aplican buenas prácticas como el manejo de errores y un menú claro."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. La función cumple con el objetivo, aunque se podría mejorar la eficiencia evitando el ciclo anidado usando el operador `in` de Python (ej: `if letra in palabra:`). Buen uso del `break` para optimizar el ciclo."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y bien estructurada. El código es legible y sigue buenas prácticas. La función cumple con todos los requisitos del ejercicio."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, legible y sigue las buenas prácticas al usar una lista temporal para construir la tupla resultante."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, bien comentado y sigue las buenas prácticas. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y utiliza buenas prácticas, como el uso de `math.sqrt` y la acumulación clara de la distancia."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible, bien estructurado y maneja el caso de error de longitudes diferentes en las tuplas. Buen trabajo!"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se podría mejorar la legibilidad usando comprensión de conjuntos en lugar de bucles for para la creación de los conjuntos."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. Utiliza un conjunto para las palabras únicas y un diccionario para contar las repeticiones, lo cual es una buena práctica. El código es legible y bien estructurado."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con todos los requisitos. El código es legible, bien estructurado y demuestra un buen entendimiento de los conjuntos y sus operaciones."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, completa y bien estructurada. Implementa la lógica de votación con éxito, utilizando un conjunto para evitar votos duplicados y un diccionario para el conteo."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. Implementa la lógica solicitada usando un ciclo for para crear el conjunto y calcula correctamente los duplicados."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y cumple con los requisitos. Podría mejorar la validación de entrada (ej: asegurarse de que la cantidad sea un número positivo) y separar la lógica en funciones más pequeñas para mayor claridad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código sigue buenas prácticas y resuelve el problema planteado de forma completa."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y completa, implementando todas las funcionalidades requeridas de la agenda telefónica. El código es legible y bien estructurado, siguiendo buenas prácticas."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y resuelve el problema planteado. Considera usar un diccionario local dentro de la función principal en lugar de una función anidada para mayor claridad y evitar posibles problemas de alcance si se necesita acceder al diccionario desde fuera de la función gestion_calificaciones."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y cumple con los requisitos. Podría mejorar la modularización separando la lógica en funciones más pequeñas para mayor legibilidad y reutilización."
      }
    ],
    "overallScore": 4.75,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.8/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-21T12:40:10.137Z",
    "evaluatedBy": "Sistema de Evaluación de No Calificados"
  },
  "jechavarr/act_ntp_s4": {
    "repositoryUrl": "jechavarr/act_ntp_s4",
    "studentName": "julian echavarria",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y bien estructurada. El código es funcional y fácil de entender, siguiendo las buenas prácticas."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, bien estructurado, maneja excepciones y valida la entrada del usuario correctamente, cumpliendo con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y bien estructurada. El código implementa la lógica solicitada de forma eficiente y legible, incluyendo una validación de tamaño de listas."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y bien estructurada. Se podría mejorar la gestión de errores al eliminar productos (considerar si la lista está vacía) y quizás usar funciones auxiliares para modularizar el código."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Bien por usar `break` para optimizar la búsqueda dentro de cada palabra. Considera pasar la letra a buscar como parámetro de la función en lugar de pedirla dentro de ella para mayor reutilización."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es limpio, funcional y cumple con todos los requisitos del ejercicio, incluyendo la correcta implementación de la lógica para determinar los puntos dentro del círculo. Se recomienda añadir un bloque `if __name__ == '__main__':` para encapsular la ejecución del código."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código está bien estructurado y sigue las buenas prácticas. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, bien estructurado y sigue las buenas prácticas. Cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con todos los requisitos. Se utilizan buenas prácticas y la solución es completa."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y sigue las buenas prácticas. Maneja correctamente la validación de la longitud de las tuplas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y bien estructurada. Utiliza las estructuras de datos adecuadas (conjunto y diccionario) para resolver el problema de manera eficiente y sigue buenas prácticas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y completo. Utiliza ciclos for para crear los conjuntos y realiza las operaciones solicitadas correctamente."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y bien estructurada. Utiliza un conjunto para votos únicos y un diccionario para contar votos, cumpliendo con el objetivo del ejercicio y siguiendo buenas prácticas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. Cumple con todos los requisitos de la actividad, incluyendo el uso del ciclo for y la correcta identificación de duplicados."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y resuelve el problema planteado. Se podría mejorar la validación de entrada (por ejemplo, verificar que la cantidad ingresada sea un número positivo) y considerar el uso de funciones auxiliares para modularizar el código."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y bien estructurada. Utiliza buenas prácticas como el uso de `lower()` para ignorar mayúsculas y `get()` para simplificar el conteo."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos del problema y el código es legible. Podrías mejorar la validación de la entrada del usuario (e.g., formato del número de teléfono) y considerar el uso de funciones para modularizar el código."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos y es funcional. Se podrían mejorar la estructura dividiendo aún más las responsabilidades en funciones y añadir validación de entrada más robusta para las calificaciones (rangos). "
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos, utilizando un diccionario anidado de manera efectiva. Podría mejorarse la validación de entrada y modularizar el código en funciones más pequeñas para mayor claridad y mantenibilidad."
      }
    ],
    "overallScore": 4.45,
    "totalActivities": 20,
    "completedActivities": 19,
    "summary": "Excelente trabajo. Completó 19/20 actividades (95%) con una calificación promedio de 4.5/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_11.py"
    ],
    "evaluatedAt": "2025-08-21T12:45:09.645Z",
    "evaluatedBy": "Sistema de Evaluación de No Calificados"
  },
  "Marinalzate/act_ntp_s4": {
    "repositoryUrl": "Marinalzate/act_ntp_s4",
    "studentName": "Emanuel Marin Alzate",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y cumple con todos los requisitos. El código es legible y sigue las buenas prácticas de programación."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y maneja correctamente la entrada del usuario, incluyendo la validación y el caso de no ingresar calificaciones."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, eficiente y legible. El código incluye manejo de errores y buenas prácticas en general."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos y es funcional. La lógica para eliminar productos puede mejorarse para evitar errores si el producto no existe. Considera usar funciones para modularizar aún más el código."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es funcional, legible y eficiente, evitando duplicados en la lista de resultados. Bien hecho."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se podría mejorar la legibilidad separando la generación de coordenadas y el filtrado de puntos en funciones separadas para mejor organización del código."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 2,
        "fileFound": true,
        "feedback": "El código no cumple con la descripción del problema. No recibe una tupla de estudiantes como entrada y no devuelve una nueva tupla con los estudiantes destacados. El código simplemente imprime los estudiantes con promedio mayor o igual a 3.5."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 1,
        "fileFound": true,
        "feedback": "El código no implementa la secuencia de Fibonacci ni cumple con los requisitos del ejercicio planteado. En cambio, realiza un conteo de colores favoritos. Debe rehacerse completamente."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 1,
        "fileFound": true,
        "feedback": "El código proporcionado no resuelve el problema planteado (cálculo de la distancia total recorrida en un sistema de coordenadas). En cambio, elimina duplicados de una tupla de nombres. Es necesario implementar la lógica para calcular la distancia entre puntos y sumarlos."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 1,
        "fileFound": true,
        "feedback": "El código entregado no resuelve el problema planteado sobre la suma de tuplas. En su lugar, filtra nombres que contienen la letra 'a'. Es necesario implementar la lógica de suma de tuplas usando un ciclo for."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 2,
        "fileFound": true,
        "feedback": "El código solo maneja una lista fija y muestra un conjunto sin duplicados. No cumple con la descripción del ejercicio, que pide crear una función que reciba dos listas, las convierta en conjuntos usando ciclos for, y calcule la unión, intersección, diferencia y diferencia simétrica."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 1,
        "fileFound": true,
        "feedback": "El código no resuelve el problema planteado. Implementa la intersección de dos conjuntos predefinidos en lugar de solicitar palabras al usuario e identificar repetidas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 1,
        "fileFound": true,
        "feedback": "El código presentado no corresponde a la descripción de la actividad (Conjuntos con pares y múltiplos de 3). El código actual elimina un elemento de un conjunto de frutas, lo cual es incorrecto."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 0,
        "fileFound": true,
        "feedback": "El código no resuelve el problema planteado de simular un sistema de votación. En cambio, imprime la edad de personas desde un diccionario. Es necesario revisar y rehacer la actividad."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 1,
        "fileFound": true,
        "feedback": "La solución no resuelve el problema planteado (conjuntos y conteo de duplicados). El código presentado corresponde a un problema diferente relacionado con diccionarios e impresión de nombres. Es necesario implementar la lógica solicitada utilizando conjuntos y un ciclo for."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 1,
        "fileFound": true,
        "feedback": "El código no implementa la funcionalidad requerida de un inventario con agregar/actualizar/eliminar. El código provisto calcula el total de una compra y tiene un error lógico en la iteración `if producto in producto:`. "
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 1,
        "fileFound": true,
        "feedback": "El código presentado no resuelve el problema planteado. En lugar de contar la frecuencia de las palabras en una frase, encuentra al estudiante con la nota más alta en un diccionario predefinido."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": false,
        "feedback": ""
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 1,
        "fileFound": true,
        "feedback": "La solución no implementa la funcionalidad solicitada en la descripción del ejercicio (gestión de calificaciones con diccionarios). El código presentado imprime nombres de personas mayores de edad, que no corresponde con la actividad. Es necesario ajustar el código para cumplir con la gestión de estudiantes y sus calificaciones."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 1,
        "fileFound": true,
        "feedback": "La solución presentada no corresponde a la descripción del ejercicio (registro de temperaturas por ciudad usando diccionarios anidados).  En su lugar, calcula promedios de notas de estudiantes. Es necesario implementar la lógica solicitada en la descripción."
      }
    ],
    "overallScore": 2.1,
    "totalActivities": 20,
    "completedActivities": 18,
    "summary": "Necesita mejorar. Completó 18/20 actividades (90%) con una calificación promedio de 2.1/5. Se recomienda revisar los conceptos fundamentales.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_18.py",
      "Revisar y mejorar las actividades con calificación baja",
      "Enfocarse en mejorar la documentación y comentarios del código",
      "Aplicar mejores prácticas de programación"
    ],
    "evaluatedAt": "2025-08-21T13:55:28.294Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "leandro760/act_ntp_s4": {
    "repositoryUrl": "leandro760/act_ntp_s4",
    "studentName": "Leandro Alberto Acevedo Zapata",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender. Excelente trabajo."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es claro, bien estructurado, y resuelve el problema correctamente con validaciones robustas de la entrada del usuario. Buen trabajo."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, eficiente y cumple con los requisitos. El código es limpio y fácil de entender, incluyendo una validación importante sobre el tamaño de las listas."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos de la actividad y presenta una buena estructura. Se sugiere encapsular la lógica del menú en funciones separadas para mejorar la legibilidad y reutilización del código. Además, la llamada a la función al final (print(carrito_de_compras())) imprime None, ya que la función no retorna nada explícitamente; se puede eliminar esa línea."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podría mejorarse la legibilidad separando la lógica de entrada/salida de la función principal, y evitando duplicados en la lista de palabras encontradas."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podría mejorar la legibilidad utilizando nombres de variables más descriptivos y considerar el uso de list comprehension para generar los puntos dentro del círculo, lo cual lo haría más conciso."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podrías mejorar la eficiencia utilizando una lista para construir la nueva tupla y luego convertirla a tupla al final, ya que concatenar tuplas en un bucle es menos eficiente. Considera usar nombres de variables más descriptivos."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es limpio, funcional y sigue las instrucciones al pie de la letra. Bien hecho."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. El código es legible y utiliza la función `math.sqrt` correctamente. Se podría mejorar la generalización permitiendo una tupla como entrada en lugar de una lista predefinida."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. La función `suma_tuplas` podría recibir las dos tuplas como argumentos separados en lugar de una tupla que las contiene."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y completa. El código es legible y utiliza las operaciones de conjuntos de Python de manera eficiente. Se podría mejorar la reutilización del código (por ejemplo, la conversión de listas a conjuntos en una función separada)."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y resuelve correctamente el problema planteado utilizando conjuntos de manera eficiente. Bien hecho."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y resuelve el problema planteado de forma eficiente, utilizando ciclos for y conjuntos de manera correcta para realizar las operaciones solicitadas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Considera corregir la errata en el nombre de la función (`sistemea_votacion` debería ser `sistema_votacion`) y añadir validación adicional a la entrada del usuario (ej: evitar cadenas vacías)."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Sin embargo, no es necesario convertir `numeros` a lista antes de calcular la longitud original, y la conversión de `numeros_unicos` a lista es redundante si solo se usa para imprimir. Considera pasar la lista como argumento a la función para mayor flexibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y cumple con los requisitos. Podrías mejorar la validación de la entrada del usuario (por ejemplo, verificar que la cantidad sea un número positivo) y modularizar el código en funciones más pequeñas para mejorar la legibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es claro, bien estructurado y cumple con todos los requisitos del problema. Excelente trabajo."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos de la actividad y tiene buena estructura. Podría mejorarse encapsulando las funciones de agregar, buscar, mostrar y eliminar contactos para mayor modularidad y legibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con los requisitos. Sería recomendable modularizar el código en funciones separadas para cada opción del menú para mejorar la legibilidad y mantenibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y correcta. Considera modularizar el código separando la lógica de cálculo de estadísticas de la impresión de resultados para mejorar la mantenibilidad. Además, podría incluir validación de datos para robustecer la función."
      }
    ],
    "overallScore": 4.4,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.4/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-21T12:55:15.777Z",
    "evaluatedBy": "Sistema de Evaluación de No Calificados"
  },
  "VictorPolo28/act_ntp_s4": {
    "repositoryUrl": "VictorPolo28/act_ntp_s4",
    "studentName": "Victor Manuel Polo Ruedas",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y bien estructurado, siguiendo las buenas prácticas. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podrías mejorar la validación de entrada para evitar errores con tipos de datos no esperados, aunque manejas el ValueError correctamente."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, incluyendo una validación para el tamaño de las listas."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y resuelve el problema planteado. Se puede mejorar la legibilidad y evitar la repetición del input en cada iteración (ej: guardar el valor del input en una variable)."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podrías mejorar la legibilidad usando nombres de variables más descriptivos dentro del bucle for. Considera agregar un bloque `if __name__ == '__main__':` para la ejecución del código principal."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Sin embargo, la conversión a tupla es innecesaria ya que no se utiliza después. Además, la función debería retornar la tupla en lugar de imprimirla directamente."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 2,
        "fileFound": true,
        "feedback": "La función `coordinates` retorna en la primera iteración del bucle, impidiendo el cálculo de la distancia total entre todos los puntos. Además, la fórmula de distancia usa el punto anterior en lugar del siguiente, y no se maneja correctamente el índice para evitar errores al acceder a puntos fuera de los límites de la tupla."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. El código es limpio y fácil de entender, cumpliendo con todos los requisitos del ejercicio."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con todos los requisitos. El código es limpio, legible y eficiente, utilizando correctamente los conjuntos y sus operaciones."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos del problema. Se puede mejorar la legibilidad usando un conjunto para verificar la existencia de la palabra en lugar de una lista para `palabras_ingresadas`."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. El código es legible, pero podría mejorarse la eficiencia del ciclo `for` para solo iterar sobre los rangos necesarios (2-20 y 3-30 respectivamente). Además, el `if/elif` pudo ser solo `if` y luego otro `if`."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos, utilizando un conjunto para almacenar los votos y un ciclo while. Se podría mejorar la validación de la entrada del candidato y generalizar un poco más la función para mayor reusabilidad."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, legible y cumple con el objetivo de la actividad utilizando un ciclo for y un conjunto para encontrar los duplicados."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y cumple con los requisitos. Se puede mejorar la validación de entrada y la organización del código en funciones más pequeñas para mayor claridad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y bien estructurado. Cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La lógica general es correcta, pero hay errores al buscar e imprimir contactos, refiriéndose a `agenda` en lugar de `contactos`. Además, al mostrar todos los contactos, se imprime 'nombres.title()' en lugar del nombre del contacto."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: Failed to fetch"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos y tiene buena estructura. Considera agregar validación para evitar ciudades o días duplicados y mejorar el manejo de errores en las estadísticas."
      }
    ],
    "overallScore": 3.55,
    "totalActivities": 20,
    "completedActivities": 17,
    "summary": "Buen trabajo general. Completó 17/20 actividades (85%) con una calificación promedio de 3.5/5. Hay oportunidades de mejora en algunos aspectos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_04.py, src/ejercicio_06.py, src/ejercicio_19.py",
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-21T13:02:35.904Z",
    "evaluatedBy": "Sistema de Evaluación de No Calificados"
  },
  "Luisfercit/act_ntp_s4": {
    "repositoryUrl": "Luisfercit/act_ntp_s4",
    "studentName": "Luis Fernando Miranda Rivas",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      }
    ],
    "overallScore": 0,
    "totalActivities": 20,
    "completedActivities": 0,
    "summary": "Necesita mejorar. Completó 0/20 actividades (0%) con una calificación promedio de 0.0/5. Se recomienda revisar los conceptos fundamentales.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja",
      "Enfocarse en mejorar la documentación y comentarios del código",
      "Aplicar mejores prácticas de programación"
    ],
    "evaluatedAt": "2025-08-21T13:04:59.361Z",
    "evaluatedBy": "Sistema de Evaluación de No Calificados"
  },
  "yorman-usme/act_ntp_s4": {
    "repositoryUrl": "yorman-usme/act_ntp_s4",
    "studentName": "Yorman Ivan Usme Hernandez",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código cumple con los requisitos del ejercicio y está bien estructurado."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional.  Considera agregar manejo de errores para entradas no numéricas y mejorar la legibilidad con comentarios."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y resuelve el problema correctamente utilizando un bucle for y la lógica esperada. Bien hecho."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con los requisitos. Considera agregar validación de entrada (por ejemplo, para precios) y manejar excepciones para una mayor robustez."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El uso de `break` optimiza el ciclo interno evitando repeticiones innecesarias."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podrías mejorar la legibilidad separando la generación de puntos y la verificación dentro del círculo en funciones separadas para mayor modularidad y reutilización."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos. Podrías considerar usar comprensión de listas para una solución más concisa y legible."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, legible y cumple con los requisitos del ejercicio. Buen trabajo."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo planteado utilizando la función distancia de manera adecuada."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Sería mejor convertir las listas a conjuntos *dentro* de la función usando ciclos for, como lo indica la descripción del problema, en lugar de usar `set()` directamente. Considera también agregar comentarios para mejorar la legibilidad."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender. Buen uso de conjuntos para identificar palabras únicas y repetidas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es limpio, fácil de entender y cumple con todos los requisitos del problema."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código implementa la lógica de votación usando un conjunto para almacenar votos únicos y un ciclo while para permitir múltiples votos, cumpliendo con todos los requisitos."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos del ejercicio. El código es legible y bien estructurado. Excelente trabajo."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución resuelve la actividad correctamente y la estructura del código es clara.  Podrías añadir validación de entrada (e.g., que la cantidad sea un número positivo) y un manejo de errores más robusto."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La función resuelve correctamente el problema planteado. El código es legible y la lógica es clara. Se podría mejorar agregando una función `main` para estructurar mejor el programa."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución implementa correctamente la agenda telefónica con las funcionalidades requeridas. Podrías mejorar la validación de la entrada del usuario y la presentación de la información."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con los requisitos. Se podría mejorar la estructura del código separando las funcionalidades en funciones más pequeñas para mayor legibilidad y mantenibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos básicos, pero la falta de validación de entrada y manejo de errores (ej. división por cero si no hay temperaturas) reduce la calidad. Podrías mejorar la estructura modularizando el código en funciones más pequeñas."
      }
    ],
    "overallScore": 4.2,
    "totalActivities": 20,
    "completedActivities": 19,
    "summary": "Excelente trabajo. Completó 19/20 actividades (95%) con una calificación promedio de 4.2/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_10.py"
    ],
    "evaluatedAt": "2025-09-04T14:29:26.740Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "samuprogramador333/act_ntp_s4": {
    "repositoryUrl": "samuprogramador333/act_ntp_s4",
    "studentName": "Samuel Bernal",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y bien estructurada. El código cumple con la descripción de la actividad y utiliza buenas prácticas."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código funciona correctamente, es legible y maneja bien las entradas no válidas. ¡Buen trabajo!"
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y maneja correctamente el caso de listas de diferente tamaño. Bien hecho."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución implementa correctamente el carrito de compras con las funcionalidades requeridas. Se podría mejorar la validación de la entrada del usuario (manejo de errores si el input no es un número) y considerar el uso de cantidades para cada producto en el carrito."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y correcta. Sin embargo, podría mejorarse la legibilidad evitando la anidación innecesaria y usando `in` para verificar si la letra está en la palabra."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código resuelve correctamente el problema, es legible y utiliza buenas prácticas al generar las tuplas y calcular la distancia. Bien hecho."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender. Se aplican buenas prácticas al crear una función específica para la tarea."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos del ejercicio de manera completa."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso, y resuelve el problema correctamente. Incluye casos de prueba adicionales, demostrando un buen entendimiento del problema."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se podría mejorar la eficiencia creando la tupla directamente sin usar una lista intermedia y la gestión de errores podría retornar un valor por defecto en lugar de imprimir."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con todos los requisitos de la actividad. La función `operaciones_con_conjuntos` es bien estructurada y fácil de entender."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con todos los requisitos de la actividad, incluyendo el manejo de palabras repetidas y la salida formateada."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con todos los requisitos de la actividad. Muy bien estructurado y fácil de entender."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es limpio, funcional y cumple con todos los requisitos. Podrías considerar el uso de un diccionario para contar la cantidad de votos por candidato para una funcionalidad más completa."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente, cumple con todos los requisitos. El código es limpio y fácil de entender, aplicando buenas prácticas. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y cumple con los requisitos. Podría mejorarse la validación de entrada para evitar errores y refactorizar el código para mayor legibilidad, separando la lógica en funciones más pequeñas."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con todos los requisitos del ejercicio, incluyendo el ordenamiento por frecuencia y el manejo de mayúsculas/minúsculas. Buen trabajo!"
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. El código es legible y bien estructurado. Se podría mejorar la validación de la entrada del número de teléfono y encapsular la lógica en funciones más pequeñas para mayor modularidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con los requisitos. Podría mejorarse la estructura separando la lógica de la función `gestionar_calificaciones` en funciones más pequeñas y utilizando un menú interactivo para mayor flexibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podría mejorarse la modularidad separando la lógica de la interacción con el usuario y agregando validaciones de entrada más robustas (e.g., tipo de dato de la temperatura)."
      }
    ],
    "overallScore": 4.65,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.7/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-09-04T14:33:37.647Z",
    "evaluatedBy": "Sistema de Evaluación"
  }
}