{
  "JUsmaa/act_ntp_s3": {
    "repositoryUrl": "JUsmaa/act_ntp_s3",
    "studentName": "Julian Usma Perez",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La solución imprime del 1 al 9, en lugar de 0 al 9.  El `print` incluye texto innecesario; debería imprimir solo el número."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Sin embargo, la condición `if (i < 1): break` es redundante, ya que el ciclo `while i:` ya se detendrá cuando `i` sea 0. Simplifica eliminando esa condición."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código calcula la suma correctamente, pero imprime la suma parcial en cada iteración del ciclo. Deberías imprimir la suma final solo después de que el ciclo `for` termine."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con los requisitos. El código es legible y funciona como se espera."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 1,
        "fileFound": true,
        "feedback": "El código no cumple con los requisitos de la actividad. Falta la implementación del ciclo for para imprimir la tabla del 7."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      }
    ],
    "overallScore": 0.8,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Necesita mejorar. Completó 20/20 actividades (100%) con una calificación promedio de 0.8/5. Se recomienda revisar los conceptos fundamentales.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja",
      "Enfocarse en mejorar la documentación y comentarios del código",
      "Aplicar mejores prácticas de programación"
    ],
    "evaluatedAt": "2025-07-25T06:32:16.488Z",
    "evaluatedBy": "Sistema"
  },
  "CristianSierra420/act_ntp_s3": {
    "repositoryUrl": "CristianSierra420/act_ntp_s3",
    "studentName": "Cristian Andrés  Sierra Duque",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 4,
        "fileFound": true,
        "feedback": "El código funciona correctamente. La condición `if i < 10:` es redundante dentro del bucle for y puede ser removida para mejorar la legibilidad. El uso de `range(10)` es la forma correcta de iterar del 0 al 9."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos de la actividad. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, eficiente y cumple con todos los requisitos. El código es legible y sigue las buenas prácticas."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código es funcional y cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos de la actividad."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código es limpio y fácil de entender, cumpliendo con la descripción de la actividad."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código cumple con los requisitos de la actividad y está bien estructurado."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, eficiente y cumple con todos los requisitos de la actividad. El uso del `range` con el paso de 2 es la forma más eficiente de resolver el problema."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El uso de `.lower()` para la comparación con 'fin' hace que el programa sea más robusto."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, cumpliendo el objetivo de la actividad. El código es legible y funciona como se espera."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "El código resuelve correctamente el problema del factorial usando un ciclo while. Es legible y bien estructurado, cumpliendo con los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y cumple con el objetivo planteado utilizando un ciclo for y la función range de manera adecuada."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y cumple con todos los requisitos de la actividad. Bien hecho."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y resuelve el problema correctamente. No hay áreas de mejora evidentes."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible, bien estructurado y cumple con el objetivo propuesto. Excelente uso del formato f-string para la salida."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es limpio, funcional y cumple con todos los requisitos de la actividad. El uso de `isdigit()` es correcto y las salidas son claras."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"9s\"}]}}"
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"8s\"}]}}"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"7s\"}]}}"
      }
    ],
    "overallScore": 4.2,
    "totalActivities": 20,
    "completedActivities": 17,
    "summary": "Excelente trabajo. Completó 17/20 actividades (85%) con una calificación promedio de 4.2/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_18.py, src/ejercicio_19.py, src/ejercicio_20.py"
    ],
    "evaluatedAt": "2025-07-25T17:29:53.255Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "JuanRivera24/act_ntp_s4": {
    "repositoryUrl": "JuanRivera24/act_ntp_s4",
    "studentName": "Juan Manuel Rivera Restrepo",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender. Incluye la prueba de la función como parte del script."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Sería mejor encapsular el cálculo del promedio, máximo y mínimo en funciones separadas para mejorar la legibilidad y reutilización."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con los requisitos del ejercicio."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución resuelve el problema planteado. Se podría mejorar la validación de la entrada (precio) y la presentación de los productos en el carrito para mayor claridad."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional, pero no utiliza ciclos anidados como se sugiere en la descripción del ejercicio (aunque esto no era estrictamente obligatorio). Se podría mejorar la legibilidad agregando comentarios."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es conciso, legible y cumple con todos los requisitos del ejercicio. El uso de listas por comprensión es muy apropiado."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y concisa. El código es limpio y eficiente al usar una comprensión de tupla para filtrar los estudiantes."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución genera correctamente la tupla de Fibonacci y filtra los impares. Podría mejorarse la claridad separando la generación de la tupla de Fibonacci de la impresión de los impares y usando un ciclo for para la impresión como se pide en la descripción."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y resuelve correctamente el problema planteado. Además, utiliza la función `math.dist` de manera eficiente."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente, utilizando una comprensión de lista para lograr el resultado deseado. El código es legible y cumple con las buenas prácticas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, pero sería mejor incluir los nombres de las operaciones al imprimirlas para mayor claridad. Además, se esperaría que la conversión de listas a conjuntos se realizara *dentro* de la función, no con `set(l1), set(l2)`. "
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se podría mejorar incluyendo una función main() para organizar mejor el código."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utiliza comprensiones de conjunto de manera eficiente. Sin embargo, podría ser más legible si se separan las operaciones de conjuntos en líneas separadas y se imprimen con etiquetas descriptivas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza un conjunto para almacenar los votos únicos y la lógica del ciclo while es adecuada. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa.  Sin embargo, no utiliza un ciclo for como lo pide la descripción del ejercicio, aunque la función logra el objetivo. Sería mejor agregar comentarios y documentación para mejorar la legibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos básicos de la actividad. Se podría mejorar la validación de entrada (por ejemplo, asegurarse de que la cantidad sea un número positivo) y estructurar el código en funciones más pequeñas para mayor legibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible, bien estructurado y utiliza buenas prácticas como `get()` para contar palabras y `sorted()` con `lambda` para ordenar el diccionario."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución resuelve la actividad correctamente y es funcional. Podría mejorar la presentación del menú y el manejo de errores al eliminar contactos (notificar si no existe)."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con los requisitos. Sería mejor encapsular la funcionalidad en funciones separadas para mejor legibilidad y reutilización del código. Además, se podría agregar validación de entrada para las notas."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La solución cumple con la funcionalidad básica, pero le falta el cálculo de estadísticas y validación de entradas. La estructura del código podría mejorarse para facilitar la lectura y mantenimiento."
      }
    ],
    "overallScore": 4.35,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.3/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-20T01:46:46.304Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "Samuel0490/act_ntp_s4": {
    "repositoryUrl": "Samuel0490/act_ntp_s4",
    "studentName": "Samuel Alvis Bornacelly",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y bien estructurada. El código es legible y cumple con la descripción de la actividad. Buen trabajo."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y completa. El código es legible y maneja correctamente la entrada del usuario y los cálculos solicitados."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y bien estructurada. El código incluye validación del tamaño de las listas y una prueba funcional, demostrando buenas prácticas."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos. Se podría mejorar la gestión de errores al eliminar productos (manejar el caso en que el carrito esté vacío) y usar funciones auxiliares para modularizar el código."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional, utilizando ciclos anidados de forma adecuada. Se puede mejorar la modularidad separando la lógica de entrada del usuario de la función principal. Considera validar que la entrada del usuario sea una sola letra."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, bien estructurado y resuelve el problema planteado eficientemente. Incluye la generación de puntos aleatorios, el cálculo de la distancia y la identificación correcta de los puntos dentro del círculo."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y bien estructurada. El código cumple con todos los requisitos de la actividad y sigue buenas prácticas."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible, bien estructurado y cumple con todos los requisitos de la actividad. Podría añadirse documentación (docstrings) a la función para mejorar aún más la claridad."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es claro, bien estructurado y utiliza buenas prácticas como el uso de `math.sqrt` para el cálculo de la distancia euclidiana. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible, bien estructurado y cumple con el objetivo propuesto. Se incluye validación de la longitud de las tuplas y conversión explícita a tupla al final."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se podría mejorar la legibilidad utilizando comprensión de conjuntos en lugar de ciclos for para crear los conjuntos."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, eficiente y cumple con todos los requisitos de la actividad. Utiliza buenas prácticas al normalizar la entrada y al estructurar la lógica del programa."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y bien estructurada. El código es legible, eficiente y cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. El uso de conjuntos para evitar votos duplicados es adecuado. Se puede mejorar la legibilidad separando la lógica de entrada/validación de la lógica de conteo de votos en funciones separadas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y bien estructurada. El código es legible y cumple con el objetivo de la actividad utilizando un ciclo for para crear el conjunto y calcular los duplicados."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos del problema. Se puede mejorar la validación de entrada (ej: asegurar que la cantidad ingresada sea un entero positivo) y considerar el uso de funciones auxiliares para organizar mejor el código."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y cumple con todos los requisitos, incluyendo el manejo de mayúsculas/minúsculas y el ordenamiento por frecuencia. Bien hecho."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. El código está bien estructurado y es legible. Se podría mejorar la validación de la entrada del usuario (ej: validar que el teléfono sea un número)."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y bien estructurada, cumpliendo con los requisitos. Podría mejorarse la validación de entrada de datos y la organización del código en funciones más pequeñas para aumentar la legibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos de la actividad y ofrece un menú interactivo funcional. Se podría mejorar la validación de entrada y la modularización del código para hacerlo más legible y mantenible."
      }
    ],
    "overallScore": 4.6,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.6/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-20T01:53:43.998Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "JoelSMR/act_ntp_s4": {
    "repositoryUrl": "JoelSMR/act_ntp_s4",
    "studentName": "Joel Stiven Mariños Rivera",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con la descripción del problema. Buen trabajo."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código maneja la entrada de datos de forma robusta y calcula correctamente las estadísticas solicitadas."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, funcional y cumple con todos los requisitos de la actividad. Bien hecho."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con la funcionalidad requerida y está bien estructurada. Se sugiere agregar validación de entrada para el precio y manejar excepciones para evitar errores en tiempo de ejecución. Considera usar un diccionario en vez de listas anidadas para representar los productos."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se puede mejorar la eficiencia evitando la repetición de palabras en la lista `palabrasencontradas` si una palabra contiene la letra varias veces. Considerar usar conjuntos para eliminar duplicados."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, bien estructurado y cumple con todos los requisitos de la actividad. Excelente trabajo!"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y sigue las buenas prácticas al usar un ciclo for y convertir la lista filtrada a una tupla al final."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es limpio, eficiente y cumple con todos los requisitos. Muy bien implementado el uso de la tupla y los ciclos."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La función resuelve correctamente el problema. Podría mejorar la legibilidad incluyendo comentarios y evitando variables innecesarias en el cálculo de la distancia. Considera generalizar el ejemplo en una función main."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza un ciclo for para sumar los elementos de las tuplas y devuelve el resultado como una nueva tupla. Buen trabajo."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos del problema. Bien hecho."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos. El código es claro, conciso y utiliza conjuntos eficientemente para la tarea."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con todos los requisitos de la actividad, incluyendo la generación de los conjuntos y las operaciones entre ellos."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza adecuadamente un conjunto para almacenar los votos únicos y permite terminar la votación con 'fin'. Buen trabajo."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con los requerimientos del problema. Utiliza un ciclo for y un conjunto de forma correcta para identificar y contar los duplicados."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 1,
        "fileFound": true,
        "feedback": "El código proporcionado no corresponde a la descripción del problema (simulación de un inventario). Implementa un contador de palabras en una frase. Es necesario rehacer la actividad enfocándose en la manipulación de un diccionario para representar el inventario."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código cumple con todos los requisitos del ejercicio y está bien estructurado."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos del ejercicio. Se podría mejorar la validación de la entrada del usuario y encapsular la lógica en funciones más pequeñas para aumentar la legibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con los requisitos. Se podría mejorar la estructura utilizando funciones auxiliares para cada opción del menú y validando la entrada del usuario (por ejemplo, asegurarse de que la calificación sea un número válido)."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos principales. Se podría mejorar la validación de entrada (p. ej., asegurarse de que la temperatura sea un número) y encapsular la lógica de cada opción en funciones separadas para mayor legibilidad."
      }
    ],
    "overallScore": 4.5,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.5/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-20T14:07:08.359Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "leandro760/act_ntp_s4": {
    "repositoryUrl": "leandro760/act_ntp_s4",
    "studentName": "Leandro Alberto Acevedo Zapata",
    "activities": [
      {
        "activityDescription": "LISTAS - Ejercicio 1: Crea una función que reciba una lista de números y use un ciclo for para devolver una nueva lista con solo los números pares. Prueba la función con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender. Bien hecho."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 2: Implementa una función que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota más alta y más baja.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y bien estructurada. El código es legible, maneja correctamente la entrada del usuario y calcula las estadísticas solicitadas de forma precisa."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 3: Crea una función que reciba dos listas de igual tamaño y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y resuelve el problema planteado de manera eficiente. El manejo de la excepción en caso de listas de diferente longitud es un buen detalle."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 4: Desarrolla una función que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un menú que permita agregar, eliminar, mostrar productos y calcular el total.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos y funciona correctamente. Se recomienda encapsular la lógica principal dentro de una función y evitar imprimir el retorno de la función `carrito_de_compras()` (eliminar `print(carrito_de_compras())`)."
      },
      {
        "activityDescription": "LISTAS - Ejercicio 5: Implementa una función que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra específica ingresada por el usuario.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se podría mejorar la eficiencia evitando la repetición de palabras en la lista resultante usando un `set` antes de imprimir."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 6: Crea una función que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cuáles puntos están dentro de un círculo de radio 5 centrado en el origen.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 7: Desarrolla una función que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se podría mejorar la eficiencia usando una lista para construir la tupla de aprobados y luego convertirla a tupla, evitando la concatenación de tuplas dentro del bucle."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 8: Implementa una función que cree una tupla con los primeros 20 números de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los números impares.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y cumple con todos los requisitos del ejercicio. Bien hecho."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 9: Crea una función que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podría mejorarse el nombre de la función a 'distancia_total' para seguir la convención de nombres en español. Además, se podría añadir una validación para asegurar que la entrada 'puntos' sea una lista de tuplas y que cada tupla tenga la longitud esperada (2)."
      },
      {
        "activityDescription": "TUPLAS - Ejercicio 10: Desarrolla una función que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).",
        "solutionFile": "src/ejercicio_10.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La función resuelve el problema correctamente. Se podría mejorar la legibilidad recibiendo dos tuplas directamente en lugar de una tupla de tuplas, simplificando la llamada a la función."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 11: Crea una función que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la unión, intersección, diferencia y diferencia simétrica entre ambos conjuntos.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, funcional y sigue las instrucciones al pie de la letra. El código es limpio y legible. Buen trabajo."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 12: Implementa una función que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cuántas palabras únicas se ingresaron y cuáles se repitieron.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso, y cumple con todos los requisitos del ejercicio. Se utilizan conjuntos correctamente para identificar palabras únicas y repetidas."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 13: Desarrolla una función que genere dos conjuntos: uno con números pares del 2 al 20 y otro con múltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y completa. El código es claro, bien estructurado y cumple con todos los requisitos del ejercicio, incluyendo la generación de los conjuntos y las operaciones entre ellos."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 14: Crea una función que simule un sistema de votación. Usa un conjunto para almacenar los votos únicos y un ciclo while para permitir que múltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Sería mejor nombrar la función como 'sistema_votacion' (corrección de ortografía) y agregar una breve documentación para explicar su propósito."
      },
      {
        "activityDescription": "CONJUNTOS - Ejercicio 15: Implementa una función que reciba una lista de números con duplicados y use un ciclo for para crear un conjunto con números únicos. Luego compara el tamaño original vs el conjunto para mostrar cuántos duplicados había.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Convertir el conjunto a lista al final es innecesario y la función no recibe la lista como parámetro, lo que limita su reutilización."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 16: Crea una función que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un menú que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución resuelve el problema planteado y la estructura del código es clara y legible. Se podría mejorar la validación de entrada (cantidad) para evitar errores si no es un número."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 17: Desarrolla una función que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora mayúsculas/minúsculas y muestra las palabras ordenadas por frecuencia.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso, y resuelve el problema planteado de forma eficiente. Buena aplicación de buenas prácticas como la conversión a minúsculas."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 18: Implementa una función que simule una agenda telefónica usando un diccionario. Usa un ciclo while para mostrar un menú que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y cumple con los requisitos. Podría mejorarse separando las funcionalidades en funciones más pequeñas para mayor modularidad y legibilidad."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 19: Crea una función que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con los requisitos y es funcional. Se podría mejorar la estructura separando la lógica en funciones más pequeñas y usando validación de entrada más robusta."
      },
      {
        "activityDescription": "DICCIONARIOS - Ejercicio 20: Desarrolla una función que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con días de la semana y temperaturas. Calcula estadísticas por ciudad y día.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y correcta. Podrías considerar generalizar la función para que reciba los datos de temperaturas como argumento, haciéndola más reutilizable."
      }
    ],
    "overallScore": 4.2,
    "totalActivities": 20,
    "completedActivities": 19,
    "summary": "Excelente trabajo. Completó 19/20 actividades (95%) con una calificación promedio de 4.2/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_06.py"
    ],
    "evaluatedAt": "2025-08-20T14:09:30.192Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  }
}